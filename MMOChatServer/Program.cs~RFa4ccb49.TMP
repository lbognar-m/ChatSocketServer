using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

enum Command
{
    Login,              //0 - Log into the server
    Logout,             //1 - Logout of the server
    Message,            //2 - Send a text message to all the chat clients
    PrivateMessage,     //3
    GroupInvite,        //4
    GroupLeave,         //5
    GroupUpdate,        //6 - is sent to the game servers
    GroupAcceptInvite,  //7
    GroupDeclineInvite, //8
    GroupMessage,       //9
    Null        //No command
}

// State object for reading client data asynchronously
public class StateObject
{
    // Client  socket.
    public Socket workSocket = null;
    // Size of receive buffer.
    public const int BufferSize = 1024;
    // Receive buffer.
    public byte[] buffer = new byte[BufferSize];
    // Received data string.
    public StringBuilder sb = new StringBuilder();
}

public class Player
{   
    public Socket socket;

    public string name;

    public Group group;

    public Player(Socket InSocket)
    {
        socket = InSocket;
    }

    public Player pendingInvite; //the player who invited this player and is waiting for a reply

}

public class Group
{
    public List<Player> players = new List<Player>();

    public Player leader;
    public string GetPlayerNames()
    {
        return string.Join(",", players.Select(x => x.name));
    }
}

public class AsynchronousSocketListener
{
    // Thread signal.
    public static ManualResetEvent allDone = new ManualResetEvent(false);

    public AsynchronousSocketListener()
    {
    }

    static int maxGroupSize = 5;
    static List<Player> players = new List<Player>();
    static List<Socket> gameServers = new List<Socket>();
    static List<Group> groups = new List<Group>();
    

    public static void StartListening()
    {
        // Data buffer for incoming data.
        byte[] bytes = new Byte[1024];

        // Establish the local endpoint for the socket.
               
        IPEndPoint localEndPoint = new IPEndPoint(IPAddress.Any, 3457);

        // Create a TCP/IP socket.
        Socket listener = new Socket(AddressFamily.InterNetwork,
            SocketType.Stream, ProtocolType.Tcp);

        // Bind the socket to the local endpoint and listen for incoming connections.
        try
        {
            listener.Bind(localEndPoint);
            listener.Listen(100);

            while (true)
            {
                // Set the event to nonsignaled state.
                allDone.Reset();

                // Start an asynchronous socket to listen for connections.
                Console.WriteLine("Waiting for a connection...");
                listener.BeginAccept(
                    new AsyncCallback(AcceptCallback),
                    listener);

                // Wait until a connection is made before continuing.
                allDone.WaitOne();
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }

        Console.WriteLine("\nPress ENTER to continue...");
        Console.Read();

    }

    public static void AcceptCallback(IAsyncResult ar)
    {
        // Signal the main thread to continue.
        allDone.Set();

        // Get the socket that handles the client request.
        Socket listener = (Socket)ar.AsyncState;
        Socket handler = listener.EndAccept(ar);
        
        // Create the state object.
        StateObject state = new StateObject();
        state.workSocket = handler;
        handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
            new AsyncCallback(ReadCallback), state);
    }

    public static void ReadCallback(IAsyncResult ar)
    {
        String content = String.Empty;

        // Retrieve the state object and the handler socket
        // from the asynchronous state object.
        StateObject state = (StateObject)ar.AsyncState;
        Socket handler = state.workSocket;
        List<Player> toDelete = new List<Player>(); //important so we don't have a "collection modified" error
        Player thisPlayer = players.Where(x => x.socket == handler).SingleOrDefault();

         int bytesRead;
         if (handler.Connected)
         {
             // Read data from the client socket. 

             try
             {
                 bytesRead = handler.EndReceive(ar);

                 if (bytesRead > 0)
                 {
                    //Transform the array of bytes received from the user into an
                    //intelligent form of object Data
                    Data msgReceived = new Data(state.buffer);
                    byte[] message;
                    Player targetPlayer;
                    Data msgToSend = new Data();
                    msgToSend.cmdCommand = msgReceived.cmdCommand;
                    if (thisPlayer != null) msgToSend.strName = thisPlayer.name;
                    msgToSend.strMessage = msgReceived.strMessage;

                    switch (msgReceived.cmdCommand)
                    {
                        case Command.Login:
                            Console.WriteLine("logged in: " + msgReceived.strName);

                            if (msgReceived.strName == "i am a game server") //you can change this to some password or check the server ip here
                            {
                                gameServers.Add(handler);
                                Console.WriteLine("added a game server");   
                            }
                            else
                            {
                                Player newPlayer = new Player(handler);
                                newPlayer.name = msgReceived.strName;

                                players.Add(newPlayer);
                                Console.WriteLine("added a player");      
                            }
                                               

                            break;
                        case Command.Message:

                            if (thisPlayer == null) break;

                            Console.WriteLine(thisPlayer.name + ": " + msgReceived.strMessage);                                  

                            message = msgToSend.ToBytes();

                            foreach (Player player in players)
                            {
                                try
                                { 
                                    player.socket.Send(message);
                                }
                                catch (SocketException socketException)
                                {
                                    //WSAECONNRESET, the other side closed impolitely 
                                    if (socketException.ErrorCode == 10054 ||
                                       ((socketException.ErrorCode != 10004) &&
                                       (socketException.ErrorCode != 10053)))
                                    {
                                        Console.WriteLine("receiver disconnected");
                                    }
                                    else Console.WriteLine(socketException.Message);

                                    toDelete.Add(player);
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine(e.Message + "\n" + e.StackTrace);
                                    toDelete.Add(player);
                                }
                            }

                            break;

                        case Command.PrivateMessage:

                            if (thisPlayer == null) break;

                            Console.WriteLine(thisPlayer.name + " whispers to " + msgReceived.strName + ": " + msgReceived.strMessage);

                            targetPlayer = players.Where(x => x.name == msgReceived.strName).SingleOrDefault();

                            message = msgToSend.ToBytes();

                            targetPlayer.socket.Send(message);
                          
                            //send the message to the sender so it appears in the log:
                           
                            thisPlayer.socket.Send(message);

                            break;

                        case Command.GroupMessage:

                            if (thisPlayer == null) break;

                            Console.WriteLine("[GROUP] " + thisPlayer.name + ": " + msgReceived.strMessage);

                            if (thisPlayer.group != null)
                            {
                                message = msgToSend.ToBytes();

                                foreach (Player groupMember in thisPlayer.group.players)
                                    groupMember.socket.Send(message);
                            }
                                                      
                            break;
                        case Command.GroupInvite:
                            if (thisPlayer == null) break;
                            if (thisPlayer.group != null && thisPlayer.group.leader != thisPlayer) break; //if the inviting player is not the group's leader

                            //find the player that we want to invite
                            targetPlayer = players.Where(x => x.name == msgReceived.strName).SingleOrDefault();
                            if (targetPlayer == null || targetPlayer == thisPlayer) break;
                            
                            if (targetPlayer.group == null) //if the player is not already in a group
                                {
                                    if (targetPlayer.pendingInvite != null) break; //check if there's a pending invite

                                    targetPlayer.pendingInvite = thisPlayer;

                                    System.Timers.Timer myTimer = new System.Timers.Timer();
                                    myTimer.Elapsed += (sender, args) => ClearPendingInvite(sender, targetPlayer);
                                    myTimer.Interval = 20000; // 1000 ms is one second
                                    myTimer.Start();
                                                                        
                                    message = msgToSend.ToBytes();

                                    targetPlayer.socket.Send(message);
                                }

                            break;
                         
                        case Command.GroupAcceptInvite:
                            if (thisPlayer == null) break;
                            Player invitingPlayer = thisPlayer.pendingInvite;
                            if (invitingPlayer == null) break;

                            bool joinedGroup = false;

                            if (invitingPlayer.group == null) //create a new group
                            {
                                Group newGroup = new Group();
                                newGroup.players = new List<Player>() { invitingPlayer, thisPlayer };
                                newGroup.leader = invitingPlayer;

                                thisPlayer.group = newGroup;
                                invitingPlayer.group = newGroup;
                                joinedGroup = true;

                                groups.Add(newGroup);
                            }
                            else if (invitingPlayer.group.players.Count < maxGroupSize)
                            {
                                thisPlayer.group = invitingPlayer.group; //add the new player to the existing group
                                joinedGroup = true;
                            }

                            if (joinedGroup)
                            {
                            
                            }

                            break;

                        case Command.GroupDeclineInvite:
                            if (thisPlayer == null) break;                           
                            Player invitPlayer = thisPlayer.pendingInvite;
                            message = msgToSend.ToBytes();
                            invitPlayer.socket.Send(message);
                            thisPlayer.pendingInvite = null;

                            break;

                         case Command.GroupLeave:
                            if (thisPlayer == null) break;
                                if (thisPlayer.group != null)
                                {
                                    thisPlayer.group.players.Remove(thisPlayer);
                                                                       
                                     msgToSend.cmdCommand = Command.GroupUpdate;
                                     msgToSend.strMessage = thisPlayer.group.GetPlayerNames();
                                     message = msgToSend.ToBytes();

                                     foreach (Socket gameServer in gameServers)
                                         gameServer.Send(message);    
                                  
                                    thisPlayer.group = null;

                                }
                           
                             break;
                    }

                    // listen again:          
                    state.sb.Clear();
                    handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
                    new AsyncCallback(ReadCallback), state);                   
                
                 }
             }
             catch (SocketException socketException)
             {
                 //WSAECONNRESET, the other side closed impolitely 
                 if (socketException.ErrorCode == 10054 ||
                    ((socketException.ErrorCode != 10004) &&
                    (socketException.ErrorCode != 10053)))
                 {
                     Console.WriteLine("remote client disconnected");

                 }
                 else Console.WriteLine(socketException.Message);
                 toDelete.Add(thisPlayer);
                 handler = null;
             }
             catch (Exception e)
             {
                 Console.WriteLine(e.Message + "\n" + e.StackTrace);
                 toDelete.Add(thisPlayer);                
             }

         }

         foreach (var playerToDelete in toDelete)
             players.RemoveAll(x => x == playerToDelete);

    }

      public async void Pend()
    {
        await Task.Delay(5000);
        Console.WriteLine("clearing pending invite");
    }
    static void ClearPendingInvite(object sender, Player invitedPlayer)
    {
        ((System.Timers.Timer)sender).Enabled = false;
        
        Console.WriteLine("clearing pending invite");

        invitedPlayer.pendingInvite = null;
    }
    private static void Send(Socket handler, String data)
    {
        // Convert the string data to byte data using ASCII encoding.
        byte[] byteData = Encoding.ASCII.GetBytes(data);

        // Begin sending the data to the remote device.
        handler.BeginSend(byteData, 0, byteData.Length, 0,
            new AsyncCallback(SendCallback), handler);
    }

    private static void SendCallback(IAsyncResult ar)
    {
        try
        {
            // Retrieve the socket from the state object.
            Socket handler = (Socket)ar.AsyncState;

            // Complete sending the data to the remote device.
            int bytesSent = handler.EndSend(ar);
            Console.WriteLine("Sent {0} bytes to client.", bytesSent);                          

        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }
    }


    public static int Main(String[] args)
    {
        StartListening();
        return 0;
    }

    class Data
    {
        //Default constructor
        public Data()
        {
            this.cmdCommand = Command.Null;
            this.strMessage = null;
            this.strName = null;
        }

        //Converts the bytes into an object of type Data
        public Data(byte[] data)
        {
            //The first four bytes are for the Command
            this.cmdCommand = (Command)BitConverter.ToInt32(data, 0);

            //The next four store the length of the name
            int nameLen = BitConverter.ToInt32(data, 4);

            //The next four store the length of the message
            int msgLen = BitConverter.ToInt32(data, 8);

            //This check makes sure that strName has been passed in the array of bytes
            if (nameLen > 0)
                this.strName = Encoding.UTF8.GetString(data, 12, nameLen);
            else
                this.strName = null;

            //This checks for a null message field
            if (msgLen > 0)
                this.strMessage = Encoding.UTF8.GetString(data, 12 + nameLen, msgLen);
            else
                this.strMessage = null;
        }

        //Converts the Data structure into an array of bytes
        public byte[] ToBytes()
        {
            List<byte> result = new List<byte>();

            //First four are for the Command
            result.AddRange(BitConverter.GetBytes((int)cmdCommand));

            //Add the length of the name
            if (strName != null)
                result.AddRange(BitConverter.GetBytes(Encoding.UTF8.GetByteCount(strName)));
            //result.AddRange(BitConverter.GetBytes(strName.Length));
            else
                result.AddRange(BitConverter.GetBytes(0));

            //Length of the message
            if (strMessage != null)
                //result.AddRange(BitConverter.GetBytes(strMessage.Length));
                result.AddRange(BitConverter.GetBytes(Encoding.UTF8.GetByteCount(strMessage)));
            else
                result.AddRange(BitConverter.GetBytes(0));

            //Add the name
            if (strName != null)
                result.AddRange(Encoding.UTF8.GetBytes(strName));

            //And, lastly we add the message text to our array of bytes
            if (strMessage != null)
                result.AddRange(Encoding.UTF8.GetBytes(strMessage));

            return result.ToArray();
        }

        public string strName;      //Name by which the client logs into the room
        public string strMessage;   //Message text
        public Command cmdCommand;  //Command type (login, logout, send message, etcetera)
    } 
}